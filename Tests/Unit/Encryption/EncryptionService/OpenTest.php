<?php

declare(strict_types=1);

namespace Netlogix\Sentry\Tests\Unit\Encryption\EncryptionService;

use Netlogix\Sentry\Encryption\EncryptionService;
use Netlogix\Sentry\Encryption\Sealed;

class OpenTest extends EncryptionServiceTestCase
{
    /**
     * @test
     */
    public function EncryptionService_can_open_sealed_data(): void
    {
        $encryptionService = new EncryptionService();
        $encryptionService->injectSettings([
            'privacy' => [
                'rsaKeyFingerprint' => self::RSA_KEY_FINGERPRINT,
            ],
        ]);

        $sealed = Sealed::fromArray([
            'encryptedData' => '8qM4pkKLNxgRy61vffZKwg==',
            'initializationVector' => 'StKlRPeWNOAk5LZ9jtFR3Q==',
            'envelopeKey' => 'Zk4jrCZcHDw8SJv3WgSyfJnkAteG1G8+A4DP3vIQJTbqoPqi6dKJLutqsJLwMfh4vmsp9K/uIud8SFh3M+HwvbCDs5KOnj4ozZTdtmCVKTKm6+6nx3v5zMdte+x0oahUeJqn4QcwDU7vCIDKtuSR1xQXXDkJGznYi/aMN/O20PHRCvuR93ZWD9IYyNd6ETJwqMglP81vWQHngX4uVK0KYXsUB7T5fgj+dISw/2+zSA4WVSjexK+BpZJQjqEwp+Zv1DL5l88LT3bG5l+k/bpDx4sBcDzc8/iwNvKmbngFluZWnxu+CuUjPR4PHyv5oWWBwQ6yy2i/0JAo9FgdGvVVKw==',
        ]);

        $encryptionService->injectRsaWalletService(self::getRsaWalletServicePhp());
        $open = $encryptionService->open($sealed);

        self::assertEquals('foo', $open);
    }
}
